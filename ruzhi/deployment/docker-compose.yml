# 儒智跨平台部署配置
version: '3.8'

services:
  # 后端API服务
  ruzhi-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ruzhi-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ../backend/logs:/app/logs
      - ../backend/uploads:/app/uploads
    networks:
      - ruzhi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web前端服务
  ruzhi-web:
    build:
      context: ../web
      dockerfile: Dockerfile
    container_name: ruzhi-web
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://ruzhi-backend:3001
      - VITE_CDN_BASE_URL=https://cdn.ruzhi.com
    depends_on:
      - ruzhi-backend
    networks:
      - ruzhi-network
    restart: unless-stopped

  # MongoDB数据库
  mongodb:
    image: mongo:7.0
    container_name: ruzhi-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=ruzhi
    volumes:
      - mongodb_data:/data/db
      - ../database/init:/docker-entrypoint-initdb.d
    networks:
      - ruzhi-network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: ruzhi-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ruzhi-network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ruzhi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ../web/dist:/usr/share/nginx/html
    depends_on:
      - ruzhi-web
      - ruzhi-backend
    networks:
      - ruzhi-network
    restart: unless-stopped

  # 文件存储服务
  minio:
    image: minio/minio:latest
    container_name: ruzhi-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - ruzhi-network
    restart: unless-stopped

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: ruzhi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ruzhi-network
    restart: unless-stopped

  # 日志收集
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ruzhi-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ruzhi-network
    restart: unless-stopped

  # 日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ruzhi-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - ruzhi-network
    restart: unless-stopped

networks:
  ruzhi-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  elasticsearch_data:
    driver: local
